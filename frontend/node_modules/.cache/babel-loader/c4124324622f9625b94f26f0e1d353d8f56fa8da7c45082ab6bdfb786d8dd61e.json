{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\FloraCart\\\\frontend\\\\src\\\\components\\\\routing\\\\AdminRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children\n}) => {\n  // TODO: Implement authentication and admin role check\n  const isAuthenticated = false; // This will be managed by auth context\n  const isAdmin = false; // This will be managed by auth context\n\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_c = AdminRoute;\nAdminRoute.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","Navigate","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminRoute","children","isAuthenticated","isAdmin","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/FloraCart/frontend/src/components/routing/AdminRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AdminRoute = ({ children }) => {\r\n  // TODO: Implement authentication and admin role check\r\n  const isAuthenticated = false; // This will be managed by auth context\r\n  const isAdmin = false; // This will be managed by auth context\r\n\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (!isAdmin) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nAdminRoute.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACnC;EACA,MAAMC,eAAe,GAAG,KAAK,CAAC,CAAC;EAC/B,MAAMC,OAAO,GAAG,KAAK,CAAC,CAAC;;EAEvB,IAAI,CAACD,eAAe,EAAE;IACpB,oBAAOL,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAI,CAACL,OAAO,EAAE;IACZ,oBAAON,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B;EAEA,oBAAOX,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACQ,EAAA,GAdIT,UAAU;AAgBhBA,UAAU,CAACU,SAAS,GAAG;EACrBT,QAAQ,EAAEN,SAAS,CAACgB,IAAI,CAACC;AAC3B,CAAC;AAED,eAAeZ,UAAU;AAAC,IAAAS,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}